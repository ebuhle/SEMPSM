// Generated by rstantools.  Do not edit by hand.

/*
    SEMPSM is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    SEMPSM is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with SEMPSM.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.19.1

#include <stan/model/model_header.hpp>

namespace model_cohoPSM_SEM_namespace {

using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;

static int current_statement_begin__;

stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_cohoPSM_SEM");
    reader.add_event(224, 222, "end", "model_cohoPSM_SEM");
    return reader;
}

#include <stan_meta_header.hpp>
 class model_cohoPSM_SEM : public prob_grad {
private:
        int S;
        int D_normal;
        int D_gamma;
        matrix_d X;
        int L;
        int N;
        std::vector<int> site;
        vector_d ppt_su;
        vector_d ppt_fa;
        int I0_Z;
        int I_su;
        int I_su_Z;
        int I_fa;
        int I_fa_Z;
        std::vector<int> n;
        std::vector<int> n_psm;
        std::vector<int> I_fit;
        std::vector<int> I_lpd;
        int D;
        matrix_d X_normal;
        matrix_d X_gamma;
        std::vector<int> which_fit;
        std::vector<int> which_lpd;
        int N_lpd;
public:
    model_cohoPSM_SEM(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, 0, pstream__);
    }

    model_cohoPSM_SEM(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : prob_grad(0) {
        ctor_body(context__, random_seed__, pstream__);
    }

    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;

        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning

        current_statement_begin__ = -1;

        static const char* function__ = "model_cohoPSM_SEM_namespace::model_cohoPSM_SEM";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "S", "int", context__.to_vec());
            S = int(0);
            vals_i__ = context__.vals_i("S");
            pos__ = 0;
            S = vals_i__[pos__++];
            check_greater_or_equal(function__, "S", S, 1);

            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "D_normal", "int", context__.to_vec());
            D_normal = int(0);
            vals_i__ = context__.vals_i("D_normal");
            pos__ = 0;
            D_normal = vals_i__[pos__++];
            check_greater_or_equal(function__, "D_normal", D_normal, 0);

            current_statement_begin__ = 4;
            context__.validate_dims("data initialization", "D_gamma", "int", context__.to_vec());
            D_gamma = int(0);
            vals_i__ = context__.vals_i("D_gamma");
            pos__ = 0;
            D_gamma = vals_i__[pos__++];
            check_greater_or_equal(function__, "D_gamma", D_gamma, 0);

            current_statement_begin__ = 5;
            validate_non_negative_index("X", "S", S);
            validate_non_negative_index("X", "(D_normal + D_gamma)", (D_normal + D_gamma));
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(S,(D_normal + D_gamma)));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(S, (D_normal + D_gamma));
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = (D_normal + D_gamma);
            size_t X_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }

            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "L", "int", context__.to_vec());
            L = int(0);
            vals_i__ = context__.vals_i("L");
            pos__ = 0;
            L = vals_i__[pos__++];
            check_greater_or_equal(function__, "L", L, 1);

            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "N", "int", context__.to_vec());
            N = int(0);
            vals_i__ = context__.vals_i("N");
            pos__ = 0;
            N = vals_i__[pos__++];
            check_greater_or_equal(function__, "N", N, 1);

            current_statement_begin__ = 8;
            validate_non_negative_index("site", "N", N);
            context__.validate_dims("data initialization", "site", "int", context__.to_vec(N));
            site = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("site");
            pos__ = 0;
            size_t site_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < site_k_0_max__; ++k_0__) {
                site[k_0__] = vals_i__[pos__++];
            }
            size_t site_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < site_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "site[i_0__]", site[i_0__], 0);
                check_less_or_equal(function__, "site[i_0__]", site[i_0__], S);
            }

            current_statement_begin__ = 9;
            validate_non_negative_index("ppt_su", "N", N);
            context__.validate_dims("data initialization", "ppt_su", "vector_d", context__.to_vec(N));
            ppt_su = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("ppt_su");
            pos__ = 0;
            size_t ppt_su_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < ppt_su_j_1_max__; ++j_1__) {
                ppt_su(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 10;
            validate_non_negative_index("ppt_fa", "N", N);
            context__.validate_dims("data initialization", "ppt_fa", "vector_d", context__.to_vec(N));
            ppt_fa = Eigen::Matrix<double, Eigen::Dynamic, 1>(N);
            vals_r__ = context__.vals_r("ppt_fa");
            pos__ = 0;
            size_t ppt_fa_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < ppt_fa_j_1_max__; ++j_1__) {
                ppt_fa(j_1__) = vals_r__[pos__++];
            }

            current_statement_begin__ = 11;
            context__.validate_dims("data initialization", "I0_Z", "int", context__.to_vec());
            I0_Z = int(0);
            vals_i__ = context__.vals_i("I0_Z");
            pos__ = 0;
            I0_Z = vals_i__[pos__++];
            check_greater_or_equal(function__, "I0_Z", I0_Z, 0);
            check_less_or_equal(function__, "I0_Z", I0_Z, 1);

            current_statement_begin__ = 12;
            context__.validate_dims("data initialization", "I_su", "int", context__.to_vec());
            I_su = int(0);
            vals_i__ = context__.vals_i("I_su");
            pos__ = 0;
            I_su = vals_i__[pos__++];
            check_greater_or_equal(function__, "I_su", I_su, 0);
            check_less_or_equal(function__, "I_su", I_su, 1);

            current_statement_begin__ = 13;
            context__.validate_dims("data initialization", "I_su_Z", "int", context__.to_vec());
            I_su_Z = int(0);
            vals_i__ = context__.vals_i("I_su_Z");
            pos__ = 0;
            I_su_Z = vals_i__[pos__++];
            check_greater_or_equal(function__, "I_su_Z", I_su_Z, 0);
            check_less_or_equal(function__, "I_su_Z", I_su_Z, 1);

            current_statement_begin__ = 14;
            context__.validate_dims("data initialization", "I_fa", "int", context__.to_vec());
            I_fa = int(0);
            vals_i__ = context__.vals_i("I_fa");
            pos__ = 0;
            I_fa = vals_i__[pos__++];
            check_greater_or_equal(function__, "I_fa", I_fa, 0);
            check_less_or_equal(function__, "I_fa", I_fa, 1);

            current_statement_begin__ = 15;
            context__.validate_dims("data initialization", "I_fa_Z", "int", context__.to_vec());
            I_fa_Z = int(0);
            vals_i__ = context__.vals_i("I_fa_Z");
            pos__ = 0;
            I_fa_Z = vals_i__[pos__++];
            check_greater_or_equal(function__, "I_fa_Z", I_fa_Z, 0);
            check_less_or_equal(function__, "I_fa_Z", I_fa_Z, 1);

            current_statement_begin__ = 16;
            validate_non_negative_index("n", "N", N);
            context__.validate_dims("data initialization", "n", "int", context__.to_vec(N));
            n = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("n");
            pos__ = 0;
            size_t n_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < n_k_0_max__; ++k_0__) {
                n[k_0__] = vals_i__[pos__++];
            }
            size_t n_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < n_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n[i_0__]", n[i_0__], 0);
            }

            current_statement_begin__ = 17;
            validate_non_negative_index("n_psm", "N", N);
            context__.validate_dims("data initialization", "n_psm", "int", context__.to_vec(N));
            n_psm = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("n_psm");
            pos__ = 0;
            size_t n_psm_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < n_psm_k_0_max__; ++k_0__) {
                n_psm[k_0__] = vals_i__[pos__++];
            }
            size_t n_psm_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < n_psm_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "n_psm[i_0__]", n_psm[i_0__], 0);
            }

            current_statement_begin__ = 18;
            validate_non_negative_index("I_fit", "N", N);
            context__.validate_dims("data initialization", "I_fit", "int", context__.to_vec(N));
            I_fit = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("I_fit");
            pos__ = 0;
            size_t I_fit_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < I_fit_k_0_max__; ++k_0__) {
                I_fit[k_0__] = vals_i__[pos__++];
            }
            size_t I_fit_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < I_fit_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "I_fit[i_0__]", I_fit[i_0__], 0);
                check_less_or_equal(function__, "I_fit[i_0__]", I_fit[i_0__], 1);
            }

            current_statement_begin__ = 19;
            validate_non_negative_index("I_lpd", "N", N);
            context__.validate_dims("data initialization", "I_lpd", "int", context__.to_vec(N));
            I_lpd = std::vector<int>(N, int(0));
            vals_i__ = context__.vals_i("I_lpd");
            pos__ = 0;
            size_t I_lpd_k_0_max__ = N;
            for (size_t k_0__ = 0; k_0__ < I_lpd_k_0_max__; ++k_0__) {
                I_lpd[k_0__] = vals_i__[pos__++];
            }
            size_t I_lpd_i_0_max__ = N;
            for (size_t i_0__ = 0; i_0__ < I_lpd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "I_lpd[i_0__]", I_lpd[i_0__], 0);
                check_less_or_equal(function__, "I_lpd[i_0__]", I_lpd[i_0__], 1);
            }


            // initialize transformed data variables
            current_statement_begin__ = 23;
            D = int(0);
            stan::math::fill(D, std::numeric_limits<int>::min());

            current_statement_begin__ = 24;
            validate_non_negative_index("X_normal", "S", S);
            validate_non_negative_index("X_normal", "D_normal", D_normal);
            X_normal = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(S, D_normal);
            stan::math::fill(X_normal, DUMMY_VAR__);

            current_statement_begin__ = 25;
            validate_non_negative_index("X_gamma", "S", S);
            validate_non_negative_index("X_gamma", "D_gamma", D_gamma);
            X_gamma = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(S, D_gamma);
            stan::math::fill(X_gamma, DUMMY_VAR__);

            current_statement_begin__ = 26;
            validate_non_negative_index("which_fit", "sum(I_fit)", sum(I_fit));
            which_fit = std::vector<int>(sum(I_fit), int(0));
            stan::math::fill(which_fit, std::numeric_limits<int>::min());

            current_statement_begin__ = 27;
            validate_non_negative_index("which_lpd", "sum(I_lpd)", sum(I_lpd));
            which_lpd = std::vector<int>(sum(I_lpd), int(0));
            stan::math::fill(which_lpd, std::numeric_limits<int>::min());

            current_statement_begin__ = 28;
            N_lpd = int(0);
            stan::math::fill(N_lpd, std::numeric_limits<int>::min());

            // execute transformed data statements
            current_statement_begin__ = 30;
            stan::math::assign(D, (D_normal + D_gamma));
            current_statement_begin__ = 31;
            if (as_bool(logical_eq(D_normal, 0))) {
                current_statement_begin__ = 32;
                stan::math::assign(X_normal, rep_matrix(0, S, D_normal));
            } else {
                current_statement_begin__ = 34;
                stan::math::assign(X_normal, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, D_normal), stan::model::nil_index_list())), "X"));
            }
            current_statement_begin__ = 35;
            if (as_bool(logical_eq(D_gamma, 0))) {
                current_statement_begin__ = 36;
                stan::math::assign(X_gamma, rep_matrix(0, S, D_gamma));
            } else {
                current_statement_begin__ = 38;
                stan::math::assign(X_gamma, stan::model::rvalue(X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max((D_normal + 1), D), stan::model::nil_index_list())), "X"));
            }
            current_statement_begin__ = 41;
            for (int i = 1; i <= N; ++i) {

                current_statement_begin__ = 43;
                if (as_bool(logical_eq(get_base1(I_fit, i, "I_fit", 1), 1))) {
                    current_statement_begin__ = 44;
                    stan::model::assign(which_fit, 
                                stan::model::cons_list(stan::model::index_uni(sum(head(I_fit, i))), stan::model::nil_index_list()), 
                                i, 
                                "assigning variable which_fit");
                }
                current_statement_begin__ = 46;
                if (as_bool(logical_eq(get_base1(I_lpd, i, "I_lpd", 1), 1))) {
                    current_statement_begin__ = 47;
                    stan::model::assign(which_lpd, 
                                stan::model::cons_list(stan::model::index_uni(sum(head(I_lpd, i))), stan::model::nil_index_list()), 
                                i, 
                                "assigning variable which_lpd");
                }
            }
            current_statement_begin__ = 50;
            stan::math::assign(N_lpd, sum(I_lpd));

            // validate transformed data
            current_statement_begin__ = 23;
            check_greater_or_equal(function__, "D", D, 1);

            current_statement_begin__ = 26;
            size_t which_fit_i_0_max__ = sum(I_fit);
            for (size_t i_0__ = 0; i_0__ < which_fit_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_fit[i_0__]", which_fit[i_0__], 1);
                check_less_or_equal(function__, "which_fit[i_0__]", which_fit[i_0__], N);
            }

            current_statement_begin__ = 27;
            size_t which_lpd_i_0_max__ = sum(I_lpd);
            for (size_t i_0__ = 0; i_0__ < which_lpd_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "which_lpd[i_0__]", which_lpd[i_0__], 1);
                check_less_or_equal(function__, "which_lpd[i_0__]", which_lpd[i_0__], N);
            }

            current_statement_begin__ = 28;
            check_greater_or_equal(function__, "N_lpd", N_lpd, 0);
            check_less_or_equal(function__, "N_lpd", N_lpd, N);


            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 54;
            validate_non_negative_index("a0", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 55;
            validate_non_negative_index("phi", "D", D);
            num_params_r__ += D;
            current_statement_begin__ = 56;
            validate_non_negative_index("A_nid_vec", "((D * L) - divide((L * (L - 1)), 2))", ((D * L) - divide((L * (L - 1)), 2)));
            num_params_r__ += ((D * L) - divide((L * (L - 1)), 2));
            current_statement_begin__ = 57;
            validate_non_negative_index("Z_nid", "S", S);
            validate_non_negative_index("Z_nid", "L", L);
            num_params_r__ += (S * L);
            current_statement_begin__ = 58;
            num_params_r__ += 1;
            current_statement_begin__ = 59;
            validate_non_negative_index("b0_Z_nid", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 60;
            num_params_r__ += 1;
            current_statement_begin__ = 61;
            validate_non_negative_index("b0_std", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 62;
            num_params_r__ += 1;
            current_statement_begin__ = 63;
            validate_non_negative_index("b_su_Z_nid", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 64;
            num_params_r__ += 1;
            current_statement_begin__ = 65;
            validate_non_negative_index("b_su_std", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 66;
            num_params_r__ += 1;
            current_statement_begin__ = 67;
            validate_non_negative_index("b_fa_Z_nid", "L", L);
            num_params_r__ += L;
            current_statement_begin__ = 68;
            num_params_r__ += 1;
            current_statement_begin__ = 69;
            validate_non_negative_index("b_fa_std", "S", S);
            num_params_r__ += S;
            current_statement_begin__ = 70;
            num_params_r__ += 1;
            current_statement_begin__ = 71;
            validate_non_negative_index("logit_p_psm_std", "N", N);
            num_params_r__ += N;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    ~model_cohoPSM_SEM() { }


    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;

        current_statement_begin__ = 54;
        if (!(context__.contains_r("a0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable a0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("a0");
        pos__ = 0U;
        validate_non_negative_index("a0", "D", D);
        context__.validate_dims("parameter initialization", "a0", "row_vector_d", context__.to_vec(D));
        Eigen::Matrix<double, 1, Eigen::Dynamic> a0(D);
        size_t a0_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < a0_j_1_max__; ++j_1__) {
            a0(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(a0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable a0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 55;
        if (!(context__.contains_r("phi")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable phi missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("phi");
        pos__ = 0U;
        validate_non_negative_index("phi", "D", D);
        context__.validate_dims("parameter initialization", "phi", "row_vector_d", context__.to_vec(D));
        Eigen::Matrix<double, 1, Eigen::Dynamic> phi(D);
        size_t phi_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            phi(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_lub_unconstrain(0, 10, phi);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable phi: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 56;
        if (!(context__.contains_r("A_nid_vec")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable A_nid_vec missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("A_nid_vec");
        pos__ = 0U;
        validate_non_negative_index("A_nid_vec", "((D * L) - divide((L * (L - 1)), 2))", ((D * L) - divide((L * (L - 1)), 2)));
        context__.validate_dims("parameter initialization", "A_nid_vec", "vector_d", context__.to_vec(((D * L) - divide((L * (L - 1)), 2))));
        Eigen::Matrix<double, Eigen::Dynamic, 1> A_nid_vec(((D * L) - divide((L * (L - 1)), 2)));
        size_t A_nid_vec_j_1_max__ = ((D * L) - divide((L * (L - 1)), 2));
        for (size_t j_1__ = 0; j_1__ < A_nid_vec_j_1_max__; ++j_1__) {
            A_nid_vec(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(A_nid_vec);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable A_nid_vec: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 57;
        if (!(context__.contains_r("Z_nid")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable Z_nid missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("Z_nid");
        pos__ = 0U;
        validate_non_negative_index("Z_nid", "S", S);
        validate_non_negative_index("Z_nid", "L", L);
        context__.validate_dims("parameter initialization", "Z_nid", "matrix_d", context__.to_vec(S,L));
        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z_nid(S, L);
        size_t Z_nid_j_2_max__ = L;
        size_t Z_nid_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < Z_nid_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_nid_j_1_max__; ++j_1__) {
                Z_nid(j_1__, j_2__) = vals_r__[pos__++];
            }
        }
        try {
            writer__.matrix_unconstrain(Z_nid);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable Z_nid: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 58;
        if (!(context__.contains_r("mu_b0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_b0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_b0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_b0", "double", context__.to_vec());
        double mu_b0(0);
        mu_b0 = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_b0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_b0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 59;
        if (!(context__.contains_r("b0_Z_nid")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b0_Z_nid missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b0_Z_nid");
        pos__ = 0U;
        validate_non_negative_index("b0_Z_nid", "L", L);
        context__.validate_dims("parameter initialization", "b0_Z_nid", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b0_Z_nid(L);
        size_t b0_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b0_Z_nid_j_1_max__; ++j_1__) {
            b0_Z_nid(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b0_Z_nid);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b0_Z_nid: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 60;
        if (!(context__.contains_r("sigma_b0")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_b0 missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_b0");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_b0", "double", context__.to_vec());
        double sigma_b0(0);
        sigma_b0 = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 10, sigma_b0);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_b0: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 61;
        if (!(context__.contains_r("b0_std")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b0_std missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b0_std");
        pos__ = 0U;
        validate_non_negative_index("b0_std", "S", S);
        context__.validate_dims("parameter initialization", "b0_std", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b0_std(S);
        size_t b0_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b0_std_j_1_max__; ++j_1__) {
            b0_std(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b0_std);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b0_std: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 62;
        if (!(context__.contains_r("mu_b_su")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_b_su missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_b_su");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_b_su", "double", context__.to_vec());
        double mu_b_su(0);
        mu_b_su = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_b_su);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_b_su: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 63;
        if (!(context__.contains_r("b_su_Z_nid")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_su_Z_nid missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_su_Z_nid");
        pos__ = 0U;
        validate_non_negative_index("b_su_Z_nid", "L", L);
        context__.validate_dims("parameter initialization", "b_su_Z_nid", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_su_Z_nid(L);
        size_t b_su_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_su_Z_nid_j_1_max__; ++j_1__) {
            b_su_Z_nid(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_su_Z_nid);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_su_Z_nid: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 64;
        if (!(context__.contains_r("sigma_b_su")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_b_su missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_b_su");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_b_su", "double", context__.to_vec());
        double sigma_b_su(0);
        sigma_b_su = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 10, sigma_b_su);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_b_su: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 65;
        if (!(context__.contains_r("b_su_std")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_su_std missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_su_std");
        pos__ = 0U;
        validate_non_negative_index("b_su_std", "S", S);
        context__.validate_dims("parameter initialization", "b_su_std", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_su_std(S);
        size_t b_su_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_su_std_j_1_max__; ++j_1__) {
            b_su_std(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_su_std);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_su_std: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 66;
        if (!(context__.contains_r("mu_b_fa")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu_b_fa missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu_b_fa");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu_b_fa", "double", context__.to_vec());
        double mu_b_fa(0);
        mu_b_fa = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu_b_fa);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu_b_fa: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 67;
        if (!(context__.contains_r("b_fa_Z_nid")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_fa_Z_nid missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_fa_Z_nid");
        pos__ = 0U;
        validate_non_negative_index("b_fa_Z_nid", "L", L);
        context__.validate_dims("parameter initialization", "b_fa_Z_nid", "vector_d", context__.to_vec(L));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_fa_Z_nid(L);
        size_t b_fa_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_fa_Z_nid_j_1_max__; ++j_1__) {
            b_fa_Z_nid(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_fa_Z_nid);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_fa_Z_nid: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 68;
        if (!(context__.contains_r("sigma_b_fa")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_b_fa missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_b_fa");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_b_fa", "double", context__.to_vec());
        double sigma_b_fa(0);
        sigma_b_fa = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 10, sigma_b_fa);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_b_fa: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 69;
        if (!(context__.contains_r("b_fa_std")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable b_fa_std missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("b_fa_std");
        pos__ = 0U;
        validate_non_negative_index("b_fa_std", "S", S);
        context__.validate_dims("parameter initialization", "b_fa_std", "vector_d", context__.to_vec(S));
        Eigen::Matrix<double, Eigen::Dynamic, 1> b_fa_std(S);
        size_t b_fa_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_fa_std_j_1_max__; ++j_1__) {
            b_fa_std(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(b_fa_std);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable b_fa_std: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 70;
        if (!(context__.contains_r("sigma_psm")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable sigma_psm missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("sigma_psm");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "sigma_psm", "double", context__.to_vec());
        double sigma_psm(0);
        sigma_psm = vals_r__[pos__++];
        try {
            writer__.scalar_lub_unconstrain(0, 10, sigma_psm);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable sigma_psm: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        current_statement_begin__ = 71;
        if (!(context__.contains_r("logit_p_psm_std")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable logit_p_psm_std missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("logit_p_psm_std");
        pos__ = 0U;
        validate_non_negative_index("logit_p_psm_std", "N", N);
        context__.validate_dims("parameter initialization", "logit_p_psm_std", "vector_d", context__.to_vec(N));
        Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p_psm_std(N);
        size_t logit_p_psm_std_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < logit_p_psm_std_j_1_max__; ++j_1__) {
            logit_p_psm_std(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.vector_unconstrain(logit_p_psm_std);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable logit_p_psm_std: ") + e.what()), current_statement_begin__, prog_reader__());
        }

        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }


    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {

        typedef T__ local_scalar_t__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning

        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);

            // model parameters
            current_statement_begin__ = 54;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> a0;
            (void) a0;  // dummy to suppress unused var warning
            if (jacobian__)
                a0 = in__.row_vector_constrain(D, lp__);
            else
                a0 = in__.row_vector_constrain(D);

            current_statement_begin__ = 55;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> phi;
            (void) phi;  // dummy to suppress unused var warning
            if (jacobian__)
                phi = in__.row_vector_lub_constrain(0, 10, D, lp__);
            else
                phi = in__.row_vector_lub_constrain(0, 10, D);

            current_statement_begin__ = 56;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> A_nid_vec;
            (void) A_nid_vec;  // dummy to suppress unused var warning
            if (jacobian__)
                A_nid_vec = in__.vector_constrain(((D * L) - divide((L * (L - 1)), 2)), lp__);
            else
                A_nid_vec = in__.vector_constrain(((D * L) - divide((L * (L - 1)), 2)));

            current_statement_begin__ = 57;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> Z_nid;
            (void) Z_nid;  // dummy to suppress unused var warning
            if (jacobian__)
                Z_nid = in__.matrix_constrain(S, L, lp__);
            else
                Z_nid = in__.matrix_constrain(S, L);

            current_statement_begin__ = 58;
            local_scalar_t__ mu_b0;
            (void) mu_b0;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_b0 = in__.scalar_constrain(lp__);
            else
                mu_b0 = in__.scalar_constrain();

            current_statement_begin__ = 59;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b0_Z_nid;
            (void) b0_Z_nid;  // dummy to suppress unused var warning
            if (jacobian__)
                b0_Z_nid = in__.vector_constrain(L, lp__);
            else
                b0_Z_nid = in__.vector_constrain(L);

            current_statement_begin__ = 60;
            local_scalar_t__ sigma_b0;
            (void) sigma_b0;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_b0 = in__.scalar_lub_constrain(0, 10, lp__);
            else
                sigma_b0 = in__.scalar_lub_constrain(0, 10);

            current_statement_begin__ = 61;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b0_std;
            (void) b0_std;  // dummy to suppress unused var warning
            if (jacobian__)
                b0_std = in__.vector_constrain(S, lp__);
            else
                b0_std = in__.vector_constrain(S);

            current_statement_begin__ = 62;
            local_scalar_t__ mu_b_su;
            (void) mu_b_su;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_b_su = in__.scalar_constrain(lp__);
            else
                mu_b_su = in__.scalar_constrain();

            current_statement_begin__ = 63;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_su_Z_nid;
            (void) b_su_Z_nid;  // dummy to suppress unused var warning
            if (jacobian__)
                b_su_Z_nid = in__.vector_constrain(L, lp__);
            else
                b_su_Z_nid = in__.vector_constrain(L);

            current_statement_begin__ = 64;
            local_scalar_t__ sigma_b_su;
            (void) sigma_b_su;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_b_su = in__.scalar_lub_constrain(0, 10, lp__);
            else
                sigma_b_su = in__.scalar_lub_constrain(0, 10);

            current_statement_begin__ = 65;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_su_std;
            (void) b_su_std;  // dummy to suppress unused var warning
            if (jacobian__)
                b_su_std = in__.vector_constrain(S, lp__);
            else
                b_su_std = in__.vector_constrain(S);

            current_statement_begin__ = 66;
            local_scalar_t__ mu_b_fa;
            (void) mu_b_fa;  // dummy to suppress unused var warning
            if (jacobian__)
                mu_b_fa = in__.scalar_constrain(lp__);
            else
                mu_b_fa = in__.scalar_constrain();

            current_statement_begin__ = 67;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_fa_Z_nid;
            (void) b_fa_Z_nid;  // dummy to suppress unused var warning
            if (jacobian__)
                b_fa_Z_nid = in__.vector_constrain(L, lp__);
            else
                b_fa_Z_nid = in__.vector_constrain(L);

            current_statement_begin__ = 68;
            local_scalar_t__ sigma_b_fa;
            (void) sigma_b_fa;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_b_fa = in__.scalar_lub_constrain(0, 10, lp__);
            else
                sigma_b_fa = in__.scalar_lub_constrain(0, 10);

            current_statement_begin__ = 69;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_fa_std;
            (void) b_fa_std;  // dummy to suppress unused var warning
            if (jacobian__)
                b_fa_std = in__.vector_constrain(S, lp__);
            else
                b_fa_std = in__.vector_constrain(S);

            current_statement_begin__ = 70;
            local_scalar_t__ sigma_psm;
            (void) sigma_psm;  // dummy to suppress unused var warning
            if (jacobian__)
                sigma_psm = in__.scalar_lub_constrain(0, 10, lp__);
            else
                sigma_psm = in__.scalar_lub_constrain(0, 10);

            current_statement_begin__ = 71;
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_p_psm_std;
            (void) logit_p_psm_std;  // dummy to suppress unused var warning
            if (jacobian__)
                logit_p_psm_std = in__.vector_constrain(N, lp__);
            else
                logit_p_psm_std = in__.vector_constrain(N);

            // transformed parameters
            current_statement_begin__ = 75;
            validate_non_negative_index("A_nid", "D", D);
            validate_non_negative_index("A_nid", "L", L);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> A_nid(D, L);
            stan::math::initialize(A_nid, DUMMY_VAR__);
            stan::math::fill(A_nid, DUMMY_VAR__);

            current_statement_begin__ = 76;
            validate_non_negative_index("g_mu_X", "S", S);
            validate_non_negative_index("g_mu_X", "D", D);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> g_mu_X(S, D);
            stan::math::initialize(g_mu_X, DUMMY_VAR__);
            stan::math::fill(g_mu_X, DUMMY_VAR__);

            current_statement_begin__ = 77;
            validate_non_negative_index("b0", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b0(S);
            stan::math::initialize(b0, DUMMY_VAR__);
            stan::math::fill(b0, DUMMY_VAR__);

            current_statement_begin__ = 78;
            validate_non_negative_index("b_su", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_su(S);
            stan::math::initialize(b_su, DUMMY_VAR__);
            stan::math::fill(b_su, DUMMY_VAR__);

            current_statement_begin__ = 79;
            validate_non_negative_index("b_fa", "S", S);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> b_fa(S);
            stan::math::initialize(b_fa, DUMMY_VAR__);
            stan::math::fill(b_fa, DUMMY_VAR__);

            current_statement_begin__ = 80;
            validate_non_negative_index("logit_p_psm_hat", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_p_psm_hat(N);
            stan::math::initialize(logit_p_psm_hat, DUMMY_VAR__);
            stan::math::fill(logit_p_psm_hat, DUMMY_VAR__);

            current_statement_begin__ = 81;
            validate_non_negative_index("logit_p_psm", "N", N);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> logit_p_psm(N);
            stan::math::initialize(logit_p_psm, DUMMY_VAR__);
            stan::math::fill(logit_p_psm, DUMMY_VAR__);

            // transformed parameters block statements
            current_statement_begin__ = 85;
            stan::math::assign(A_nid, rep_matrix(0, D, L));
            {
            current_statement_begin__ = 88;
            int k(0);
            (void) k;  // dummy to suppress unused var warning
            stan::math::fill(k, std::numeric_limits<int>::min());


            current_statement_begin__ = 89;
            stan::math::assign(k, 1);
            current_statement_begin__ = 90;
            for (int i = 1; i <= D; ++i) {
                current_statement_begin__ = 91;
                for (int j = 1; j <= std::min(i, L); ++j) {

                    current_statement_begin__ = 93;
                    stan::model::assign(A_nid, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(A_nid_vec, k, "A_nid_vec", 1), 
                                "assigning variable A_nid");
                    current_statement_begin__ = 94;
                    stan::math::assign(k, (k + 1));
                }
            }
            }
            current_statement_begin__ = 99;
            stan::math::assign(g_mu_X, add(rep_matrix(a0, S), multiply(Z_nid, transpose(A_nid))));
            current_statement_begin__ = 104;
            stan::math::assign(b0, add(add(mu_b0, multiply(multiply(I0_Z, Z_nid), b0_Z_nid)), multiply(sigma_b0, b0_std)));
            current_statement_begin__ = 105;
            stan::math::assign(b_su, multiply(I_su, add(add(mu_b_su, multiply(multiply(I_su_Z, Z_nid), b_su_Z_nid)), multiply(sigma_b_su, b_su_std))));
            current_statement_begin__ = 106;
            stan::math::assign(b_fa, multiply(I_fa, add(add(mu_b_fa, multiply(multiply(I_fa_Z, Z_nid), b_fa_Z_nid)), multiply(sigma_b_fa, b_fa_std))));
            current_statement_begin__ = 109;
            stan::math::assign(logit_p_psm_hat, add(add(stan::model::rvalue(b0, stan::model::cons_list(stan::model::index_multi(site), stan::model::nil_index_list()), "b0"), elt_multiply(stan::model::rvalue(b_su, stan::model::cons_list(stan::model::index_multi(site), stan::model::nil_index_list()), "b_su"), ppt_su)), elt_multiply(stan::model::rvalue(b_fa, stan::model::cons_list(stan::model::index_multi(site), stan::model::nil_index_list()), "b_fa"), ppt_fa)));
            current_statement_begin__ = 110;
            stan::math::assign(logit_p_psm, add(logit_p_psm_hat, multiply(sigma_psm, logit_p_psm_std)));

            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            current_statement_begin__ = 75;
            size_t A_nid_j_1_max__ = D;
            size_t A_nid_j_2_max__ = L;
            for (size_t j_1__ = 0; j_1__ < A_nid_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < A_nid_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(A_nid(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: A_nid" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable A_nid: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 76;
            size_t g_mu_X_j_1_max__ = S;
            size_t g_mu_X_j_2_max__ = D;
            for (size_t j_1__ = 0; j_1__ < g_mu_X_j_1_max__; ++j_1__) {
                for (size_t j_2__ = 0; j_2__ < g_mu_X_j_2_max__; ++j_2__) {
                    if (stan::math::is_uninitialized(g_mu_X(j_1__, j_2__))) {
                        std::stringstream msg__;
                        msg__ << "Undefined transformed parameter: g_mu_X" << "(" << j_1__ << ", " << j_2__ << ")";
                        stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable g_mu_X: ") + msg__.str()), current_statement_begin__, prog_reader__());
                    }
                }
            }
            current_statement_begin__ = 77;
            size_t b0_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b0_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(b0(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b0" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b0: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 78;
            size_t b_su_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b_su_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(b_su(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b_su" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b_su: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 79;
            size_t b_fa_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b_fa_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(b_fa(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: b_fa" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable b_fa: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 80;
            size_t logit_p_psm_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_p_psm_hat_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_p_psm_hat(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_p_psm_hat" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_p_psm_hat: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 81;
            size_t logit_p_psm_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_p_psm_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(logit_p_psm(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: logit_p_psm" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable logit_p_psm: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }

            // model body

            current_statement_begin__ = 115;
            lp_accum__.add(normal_log<propto__>(a0, 0, 10));
            current_statement_begin__ = 116;
            lp_accum__.add(normal_log<propto__>(A_nid_vec, 0, 10));
            current_statement_begin__ = 117;
            lp_accum__.add(normal_log<propto__>(to_vector(Z_nid), 0, 1));
            current_statement_begin__ = 118;
            lp_accum__.add(normal_log<propto__>(mu_b0, 0, 10));
            current_statement_begin__ = 119;
            lp_accum__.add(normal_log<propto__>(b0_Z_nid, 0, 10));
            current_statement_begin__ = 120;
            lp_accum__.add(normal_log<propto__>(mu_b_su, 0, 10));
            current_statement_begin__ = 121;
            lp_accum__.add(normal_log<propto__>(b_su_Z_nid, 0, 10));
            current_statement_begin__ = 122;
            lp_accum__.add(normal_log<propto__>(mu_b_fa, 0, 10));
            current_statement_begin__ = 123;
            lp_accum__.add(normal_log<propto__>(b_fa_Z_nid, 0, 10));
            current_statement_begin__ = 127;
            lp_accum__.add(normal_log<propto__>(logit_p_psm_std, 0, 1));
            current_statement_begin__ = 130;
            lp_accum__.add(normal_log<propto__>(b0_std, 0, 1));
            current_statement_begin__ = 131;
            lp_accum__.add(normal_log<propto__>(b_su_std, 0, 1));
            current_statement_begin__ = 132;
            lp_accum__.add(normal_log<propto__>(b_fa_std, 0, 1));
            {
            current_statement_begin__ = 137;
            validate_non_negative_index("g_mu_X_normal", "S", S);
            validate_non_negative_index("g_mu_X_normal", "D_normal", D_normal);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> g_mu_X_normal(S, D_normal);
            stan::math::initialize(g_mu_X_normal, DUMMY_VAR__);
            stan::math::fill(g_mu_X_normal, DUMMY_VAR__);

            current_statement_begin__ = 138;
            validate_non_negative_index("phi_normal", "S", S);
            validate_non_negative_index("phi_normal", "D_normal", D_normal);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> phi_normal(S, D_normal);
            stan::math::initialize(phi_normal, DUMMY_VAR__);
            stan::math::fill(phi_normal, DUMMY_VAR__);


            current_statement_begin__ = 140;
            if (as_bool(logical_eq(D_normal, 0))) {

                current_statement_begin__ = 142;
                stan::math::assign(g_mu_X_normal, rep_matrix(0, S, D_normal));
                current_statement_begin__ = 143;
                stan::math::assign(phi_normal, rep_matrix(0, S, D_normal));
            } else {

                current_statement_begin__ = 147;
                stan::math::assign(g_mu_X_normal, stan::model::rvalue(g_mu_X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max(1, D_normal), stan::model::nil_index_list())), "g_mu_X"));
                current_statement_begin__ = 148;
                stan::math::assign(phi_normal, rep_matrix(head(phi, D_normal), S));
            }
            current_statement_begin__ = 151;
            lp_accum__.add(normal_log<propto__>(to_vector(X_normal), to_vector(g_mu_X_normal), to_vector(phi_normal)));
            }
            {
            current_statement_begin__ = 156;
            validate_non_negative_index("inv_mu_X_gamma", "S", S);
            validate_non_negative_index("inv_mu_X_gamma", "D_gamma", D_gamma);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> inv_mu_X_gamma(S, D_gamma);
            stan::math::initialize(inv_mu_X_gamma, DUMMY_VAR__);
            stan::math::fill(inv_mu_X_gamma, DUMMY_VAR__);

            current_statement_begin__ = 157;
            validate_non_negative_index("phi_gamma", "S", S);
            validate_non_negative_index("phi_gamma", "D_gamma", D_gamma);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, Eigen::Dynamic> phi_gamma(S, D_gamma);
            stan::math::initialize(phi_gamma, DUMMY_VAR__);
            stan::math::fill(phi_gamma, DUMMY_VAR__);


            current_statement_begin__ = 159;
            if (as_bool(logical_eq(D_gamma, 0))) {

                current_statement_begin__ = 161;
                stan::math::assign(inv_mu_X_gamma, rep_matrix(0, S, D_gamma));
                current_statement_begin__ = 162;
                stan::math::assign(phi_gamma, rep_matrix(0, S, D_gamma));
            } else {

                current_statement_begin__ = 166;
                stan::math::assign(inv_mu_X_gamma, stan::math::exp(minus(stan::model::rvalue(g_mu_X, stan::model::cons_list(stan::model::index_omni(), stan::model::cons_list(stan::model::index_min_max((D_normal + 1), D), stan::model::nil_index_list())), "g_mu_X"))));
                current_statement_begin__ = 167;
                stan::math::assign(phi_gamma, rep_matrix(tail(phi, D_gamma), S));
            }
            current_statement_begin__ = 170;
            lp_accum__.add(gamma_log<propto__>(to_vector(X_gamma), to_vector(phi_gamma), to_vector(elt_multiply(phi_gamma, inv_mu_X_gamma))));
            }
            current_statement_begin__ = 174;
            lp_accum__.add(binomial_logit_log<propto__>(stan::model::rvalue(n_psm, stan::model::cons_list(stan::model::index_multi(which_fit), stan::model::nil_index_list()), "n_psm"), stan::model::rvalue(n, stan::model::cons_list(stan::model::index_multi(which_fit), stan::model::nil_index_list()), "n"), stan::model::rvalue(logit_p_psm, stan::model::cons_list(stan::model::index_multi(which_fit), stan::model::nil_index_list()), "logit_p_psm")));

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }

        lp_accum__.add(lp__);
        return lp_accum__.sum();

    } // log_prob()

    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }


    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("a0");
        names__.push_back("phi");
        names__.push_back("A_nid_vec");
        names__.push_back("Z_nid");
        names__.push_back("mu_b0");
        names__.push_back("b0_Z_nid");
        names__.push_back("sigma_b0");
        names__.push_back("b0_std");
        names__.push_back("mu_b_su");
        names__.push_back("b_su_Z_nid");
        names__.push_back("sigma_b_su");
        names__.push_back("b_su_std");
        names__.push_back("mu_b_fa");
        names__.push_back("b_fa_Z_nid");
        names__.push_back("sigma_b_fa");
        names__.push_back("b_fa_std");
        names__.push_back("sigma_psm");
        names__.push_back("logit_p_psm_std");
        names__.push_back("A_nid");
        names__.push_back("g_mu_X");
        names__.push_back("b0");
        names__.push_back("b_su");
        names__.push_back("b_fa");
        names__.push_back("logit_p_psm_hat");
        names__.push_back("logit_p_psm");
        names__.push_back("sign_A_diag");
        names__.push_back("A");
        names__.push_back("Z");
        names__.push_back("b0_Z");
        names__.push_back("b_su_Z");
        names__.push_back("b_fa_Z");
        names__.push_back("p_psm");
        names__.push_back("N_MC");
        names__.push_back("ll_psm");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(((D * L) - divide((L * (L - 1)), 2)));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(D);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(D);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(S);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(L);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(N_lpd);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;

        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_cohoPSM_SEM_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning

        // read-transform, write parameters
        Eigen::Matrix<double, 1, Eigen::Dynamic> a0 = in__.row_vector_constrain(D);
        size_t a0_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < a0_j_1_max__; ++j_1__) {
            vars__.push_back(a0(j_1__));
        }

        Eigen::Matrix<double, 1, Eigen::Dynamic> phi = in__.row_vector_lub_constrain(0, 10, D);
        size_t phi_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            vars__.push_back(phi(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, 1> A_nid_vec = in__.vector_constrain(((D * L) - divide((L * (L - 1)), 2)));
        size_t A_nid_vec_j_1_max__ = ((D * L) - divide((L * (L - 1)), 2));
        for (size_t j_1__ = 0; j_1__ < A_nid_vec_j_1_max__; ++j_1__) {
            vars__.push_back(A_nid_vec(j_1__));
        }

        Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z_nid = in__.matrix_constrain(S, L);
        size_t Z_nid_j_2_max__ = L;
        size_t Z_nid_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < Z_nid_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_nid_j_1_max__; ++j_1__) {
                vars__.push_back(Z_nid(j_1__, j_2__));
            }
        }

        double mu_b0 = in__.scalar_constrain();
        vars__.push_back(mu_b0);

        Eigen::Matrix<double, Eigen::Dynamic, 1> b0_Z_nid = in__.vector_constrain(L);
        size_t b0_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b0_Z_nid_j_1_max__; ++j_1__) {
            vars__.push_back(b0_Z_nid(j_1__));
        }

        double sigma_b0 = in__.scalar_lub_constrain(0, 10);
        vars__.push_back(sigma_b0);

        Eigen::Matrix<double, Eigen::Dynamic, 1> b0_std = in__.vector_constrain(S);
        size_t b0_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b0_std_j_1_max__; ++j_1__) {
            vars__.push_back(b0_std(j_1__));
        }

        double mu_b_su = in__.scalar_constrain();
        vars__.push_back(mu_b_su);

        Eigen::Matrix<double, Eigen::Dynamic, 1> b_su_Z_nid = in__.vector_constrain(L);
        size_t b_su_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_su_Z_nid_j_1_max__; ++j_1__) {
            vars__.push_back(b_su_Z_nid(j_1__));
        }

        double sigma_b_su = in__.scalar_lub_constrain(0, 10);
        vars__.push_back(sigma_b_su);

        Eigen::Matrix<double, Eigen::Dynamic, 1> b_su_std = in__.vector_constrain(S);
        size_t b_su_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_su_std_j_1_max__; ++j_1__) {
            vars__.push_back(b_su_std(j_1__));
        }

        double mu_b_fa = in__.scalar_constrain();
        vars__.push_back(mu_b_fa);

        Eigen::Matrix<double, Eigen::Dynamic, 1> b_fa_Z_nid = in__.vector_constrain(L);
        size_t b_fa_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_fa_Z_nid_j_1_max__; ++j_1__) {
            vars__.push_back(b_fa_Z_nid(j_1__));
        }

        double sigma_b_fa = in__.scalar_lub_constrain(0, 10);
        vars__.push_back(sigma_b_fa);

        Eigen::Matrix<double, Eigen::Dynamic, 1> b_fa_std = in__.vector_constrain(S);
        size_t b_fa_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_fa_std_j_1_max__; ++j_1__) {
            vars__.push_back(b_fa_std(j_1__));
        }

        double sigma_psm = in__.scalar_lub_constrain(0, 10);
        vars__.push_back(sigma_psm);

        Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p_psm_std = in__.vector_constrain(N);
        size_t logit_p_psm_std_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < logit_p_psm_std_j_1_max__; ++j_1__) {
            vars__.push_back(logit_p_psm_std(j_1__));
        }

        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;

        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        if (!include_tparams__ && !include_gqs__) return;

        try {
            // declare and define transformed parameters
            current_statement_begin__ = 75;
            validate_non_negative_index("A_nid", "D", D);
            validate_non_negative_index("A_nid", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> A_nid(D, L);
            stan::math::initialize(A_nid, DUMMY_VAR__);
            stan::math::fill(A_nid, DUMMY_VAR__);

            current_statement_begin__ = 76;
            validate_non_negative_index("g_mu_X", "S", S);
            validate_non_negative_index("g_mu_X", "D", D);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> g_mu_X(S, D);
            stan::math::initialize(g_mu_X, DUMMY_VAR__);
            stan::math::fill(g_mu_X, DUMMY_VAR__);

            current_statement_begin__ = 77;
            validate_non_negative_index("b0", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b0(S);
            stan::math::initialize(b0, DUMMY_VAR__);
            stan::math::fill(b0, DUMMY_VAR__);

            current_statement_begin__ = 78;
            validate_non_negative_index("b_su", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b_su(S);
            stan::math::initialize(b_su, DUMMY_VAR__);
            stan::math::fill(b_su, DUMMY_VAR__);

            current_statement_begin__ = 79;
            validate_non_negative_index("b_fa", "S", S);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b_fa(S);
            stan::math::initialize(b_fa, DUMMY_VAR__);
            stan::math::fill(b_fa, DUMMY_VAR__);

            current_statement_begin__ = 80;
            validate_non_negative_index("logit_p_psm_hat", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p_psm_hat(N);
            stan::math::initialize(logit_p_psm_hat, DUMMY_VAR__);
            stan::math::fill(logit_p_psm_hat, DUMMY_VAR__);

            current_statement_begin__ = 81;
            validate_non_negative_index("logit_p_psm", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> logit_p_psm(N);
            stan::math::initialize(logit_p_psm, DUMMY_VAR__);
            stan::math::fill(logit_p_psm, DUMMY_VAR__);

            // do transformed parameters statements
            current_statement_begin__ = 85;
            stan::math::assign(A_nid, rep_matrix(0, D, L));
            {
            current_statement_begin__ = 88;
            int k(0);
            (void) k;  // dummy to suppress unused var warning
            stan::math::fill(k, std::numeric_limits<int>::min());


            current_statement_begin__ = 89;
            stan::math::assign(k, 1);
            current_statement_begin__ = 90;
            for (int i = 1; i <= D; ++i) {
                current_statement_begin__ = 91;
                for (int j = 1; j <= std::min(i, L); ++j) {

                    current_statement_begin__ = 93;
                    stan::model::assign(A_nid, 
                                stan::model::cons_list(stan::model::index_uni(i), stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list())), 
                                get_base1(A_nid_vec, k, "A_nid_vec", 1), 
                                "assigning variable A_nid");
                    current_statement_begin__ = 94;
                    stan::math::assign(k, (k + 1));
                }
            }
            }
            current_statement_begin__ = 99;
            stan::math::assign(g_mu_X, add(rep_matrix(a0, S), multiply(Z_nid, transpose(A_nid))));
            current_statement_begin__ = 104;
            stan::math::assign(b0, add(add(mu_b0, multiply(multiply(I0_Z, Z_nid), b0_Z_nid)), multiply(sigma_b0, b0_std)));
            current_statement_begin__ = 105;
            stan::math::assign(b_su, multiply(I_su, add(add(mu_b_su, multiply(multiply(I_su_Z, Z_nid), b_su_Z_nid)), multiply(sigma_b_su, b_su_std))));
            current_statement_begin__ = 106;
            stan::math::assign(b_fa, multiply(I_fa, add(add(mu_b_fa, multiply(multiply(I_fa_Z, Z_nid), b_fa_Z_nid)), multiply(sigma_b_fa, b_fa_std))));
            current_statement_begin__ = 109;
            stan::math::assign(logit_p_psm_hat, add(add(stan::model::rvalue(b0, stan::model::cons_list(stan::model::index_multi(site), stan::model::nil_index_list()), "b0"), elt_multiply(stan::model::rvalue(b_su, stan::model::cons_list(stan::model::index_multi(site), stan::model::nil_index_list()), "b_su"), ppt_su)), elt_multiply(stan::model::rvalue(b_fa, stan::model::cons_list(stan::model::index_multi(site), stan::model::nil_index_list()), "b_fa"), ppt_fa)));
            current_statement_begin__ = 110;
            stan::math::assign(logit_p_psm, add(logit_p_psm_hat, multiply(sigma_psm, logit_p_psm_std)));

            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning

            // write transformed parameters
            if (include_tparams__) {
                size_t A_nid_j_2_max__ = L;
                size_t A_nid_j_1_max__ = D;
                for (size_t j_2__ = 0; j_2__ < A_nid_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < A_nid_j_1_max__; ++j_1__) {
                        vars__.push_back(A_nid(j_1__, j_2__));
                    }
                }
                size_t g_mu_X_j_2_max__ = D;
                size_t g_mu_X_j_1_max__ = S;
                for (size_t j_2__ = 0; j_2__ < g_mu_X_j_2_max__; ++j_2__) {
                    for (size_t j_1__ = 0; j_1__ < g_mu_X_j_1_max__; ++j_1__) {
                        vars__.push_back(g_mu_X(j_1__, j_2__));
                    }
                }
                size_t b0_j_1_max__ = S;
                for (size_t j_1__ = 0; j_1__ < b0_j_1_max__; ++j_1__) {
                    vars__.push_back(b0(j_1__));
                }
                size_t b_su_j_1_max__ = S;
                for (size_t j_1__ = 0; j_1__ < b_su_j_1_max__; ++j_1__) {
                    vars__.push_back(b_su(j_1__));
                }
                size_t b_fa_j_1_max__ = S;
                for (size_t j_1__ = 0; j_1__ < b_fa_j_1_max__; ++j_1__) {
                    vars__.push_back(b_fa(j_1__));
                }
                size_t logit_p_psm_hat_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < logit_p_psm_hat_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_p_psm_hat(j_1__));
                }
                size_t logit_p_psm_j_1_max__ = N;
                for (size_t j_1__ = 0; j_1__ < logit_p_psm_j_1_max__; ++j_1__) {
                    vars__.push_back(logit_p_psm(j_1__));
                }
            }
            if (!include_gqs__) return;
            // declare and define generated quantities
            current_statement_begin__ = 178;
            validate_non_negative_index("sign_A_diag", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> sign_A_diag(L);
            stan::math::initialize(sign_A_diag, DUMMY_VAR__);
            stan::math::fill(sign_A_diag, DUMMY_VAR__);

            current_statement_begin__ = 179;
            validate_non_negative_index("A", "D", D);
            validate_non_negative_index("A", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> A(D, L);
            stan::math::initialize(A, DUMMY_VAR__);
            stan::math::fill(A, DUMMY_VAR__);

            current_statement_begin__ = 180;
            validate_non_negative_index("Z", "S", S);
            validate_non_negative_index("Z", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic> Z(S, L);
            stan::math::initialize(Z, DUMMY_VAR__);
            stan::math::fill(Z, DUMMY_VAR__);

            current_statement_begin__ = 181;
            validate_non_negative_index("b0_Z", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b0_Z(L);
            stan::math::initialize(b0_Z, DUMMY_VAR__);
            stan::math::fill(b0_Z, DUMMY_VAR__);

            current_statement_begin__ = 182;
            validate_non_negative_index("b_su_Z", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b_su_Z(L);
            stan::math::initialize(b_su_Z, DUMMY_VAR__);
            stan::math::fill(b_su_Z, DUMMY_VAR__);

            current_statement_begin__ = 183;
            validate_non_negative_index("b_fa_Z", "L", L);
            Eigen::Matrix<double, Eigen::Dynamic, 1> b_fa_Z(L);
            stan::math::initialize(b_fa_Z, DUMMY_VAR__);
            stan::math::fill(b_fa_Z, DUMMY_VAR__);

            current_statement_begin__ = 184;
            validate_non_negative_index("p_psm", "N", N);
            Eigen::Matrix<double, Eigen::Dynamic, 1> p_psm(N);
            stan::math::initialize(p_psm, DUMMY_VAR__);
            stan::math::fill(p_psm, DUMMY_VAR__);

            current_statement_begin__ = 185;
            int N_MC;
            (void) N_MC;  // dummy to suppress unused var warning
            stan::math::fill(N_MC, std::numeric_limits<int>::min());

            current_statement_begin__ = 186;
            validate_non_negative_index("ll_psm", "N_lpd", N_lpd);
            Eigen::Matrix<double, Eigen::Dynamic, 1> ll_psm(N_lpd);
            stan::math::initialize(ll_psm, DUMMY_VAR__);
            stan::math::fill(ll_psm, DUMMY_VAR__);

            // generated quantities statements
            current_statement_begin__ = 190;
            for (int j = 1; j <= L; ++j) {
                current_statement_begin__ = 191;
                stan::model::assign(sign_A_diag, 
                            stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                            (logical_gt(get_base1(A_nid, j, j, "A_nid", 1), 0) ? 1 : -(1) ), 
                            "assigning variable sign_A_diag");
            }
            current_statement_begin__ = 193;
            stan::math::assign(A, diag_post_multiply(A_nid, sign_A_diag));
            current_statement_begin__ = 194;
            stan::math::assign(Z, diag_post_multiply(Z_nid, sign_A_diag));
            current_statement_begin__ = 195;
            stan::math::assign(b0_Z, elt_multiply(b0_Z_nid, sign_A_diag));
            current_statement_begin__ = 196;
            stan::math::assign(b_su_Z, elt_multiply(b_su_Z_nid, sign_A_diag));
            current_statement_begin__ = 197;
            stan::math::assign(b_fa_Z, elt_multiply(b_fa_Z_nid, sign_A_diag));
            current_statement_begin__ = 200;
            stan::math::assign(p_psm, elt_divide(1.0, add(1, stan::math::exp(minus(logit_p_psm)))));
            current_statement_begin__ = 206;
            stan::math::assign(N_MC, 1000);
            current_statement_begin__ = 207;
            stan::math::assign(ll_psm, rep_vector(0, N_lpd));
            current_statement_begin__ = 208;
            for (int i = 1; i <= N_lpd; ++i) {
                {
                current_statement_begin__ = 210;
                validate_non_negative_index("ll_psm_MC", "N_MC", N_MC);
                Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> ll_psm_MC(N_MC);
                stan::math::initialize(ll_psm_MC, DUMMY_VAR__);
                stan::math::fill(ll_psm_MC, DUMMY_VAR__);


                current_statement_begin__ = 212;
                for (int j = 1; j <= N_MC; ++j) {
                    {
                    current_statement_begin__ = 214;
                    local_scalar_t__ logit_p_psm_MC(DUMMY_VAR__);
                    (void) logit_p_psm_MC;  // dummy to suppress unused var warning
                    stan::math::initialize(logit_p_psm_MC, DUMMY_VAR__);
                    stan::math::fill(logit_p_psm_MC, DUMMY_VAR__);


                    current_statement_begin__ = 216;
                    stan::math::assign(logit_p_psm_MC, normal_rng(get_base1(logit_p_psm_hat, get_base1(which_lpd, i, "which_lpd", 1), "logit_p_psm_hat", 1), sigma_psm, base_rng__));
                    current_statement_begin__ = 217;
                    stan::model::assign(ll_psm_MC, 
                                stan::model::cons_list(stan::model::index_uni(j), stan::model::nil_index_list()), 
                                binomial_logit_log(get_base1(n_psm, get_base1(which_lpd, i, "which_lpd", 1), "n_psm", 1), get_base1(n, get_base1(which_lpd, i, "which_lpd", 1), "n", 1), logit_p_psm_MC), 
                                "assigning variable ll_psm_MC");
                    }
                }
                current_statement_begin__ = 220;
                stan::model::assign(ll_psm, 
                            stan::model::cons_list(stan::model::index_uni(i), stan::model::nil_index_list()), 
                            (log_sum_exp(ll_psm_MC) - stan::math::log(N_MC)), 
                            "assigning variable ll_psm");
                }
            }

            // validate, write generated quantities
            current_statement_begin__ = 178;
            size_t sign_A_diag_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < sign_A_diag_j_1_max__; ++j_1__) {
                vars__.push_back(sign_A_diag(j_1__));
            }

            current_statement_begin__ = 179;
            size_t A_j_2_max__ = L;
            size_t A_j_1_max__ = D;
            for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                    vars__.push_back(A(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 180;
            size_t Z_j_2_max__ = L;
            size_t Z_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                    vars__.push_back(Z(j_1__, j_2__));
                }
            }

            current_statement_begin__ = 181;
            size_t b0_Z_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < b0_Z_j_1_max__; ++j_1__) {
                vars__.push_back(b0_Z(j_1__));
            }

            current_statement_begin__ = 182;
            size_t b_su_Z_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < b_su_Z_j_1_max__; ++j_1__) {
                vars__.push_back(b_su_Z(j_1__));
            }

            current_statement_begin__ = 183;
            size_t b_fa_Z_j_1_max__ = L;
            for (size_t j_1__ = 0; j_1__ < b_fa_Z_j_1_max__; ++j_1__) {
                vars__.push_back(b_fa_Z(j_1__));
            }

            current_statement_begin__ = 184;
            size_t p_psm_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < p_psm_j_1_max__; ++j_1__) {
                vars__.push_back(p_psm(j_1__));
            }

            current_statement_begin__ = 185;
            vars__.push_back(N_MC);

            current_statement_begin__ = 186;
            size_t ll_psm_j_1_max__ = N_lpd;
            for (size_t j_1__ = 0; j_1__ < ll_psm_j_1_max__; ++j_1__) {
                vars__.push_back(ll_psm(j_1__));
            }

        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }

    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }

    static std::string model_name() {
        return "model_cohoPSM_SEM";
    }


    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a0_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < a0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A_nid_vec_j_1_max__ = ((D * L) - divide((L * (L - 1)), 2));
        for (size_t j_1__ = 0; j_1__ < A_nid_vec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_nid_vec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Z_nid_j_2_max__ = L;
        size_t Z_nid_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < Z_nid_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_nid_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z_nid" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_b0";
        param_names__.push_back(param_name_stream__.str());
        size_t b0_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b0_Z_nid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_Z_nid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b0";
        param_names__.push_back(param_name_stream__.str());
        size_t b0_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b0_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_b_su";
        param_names__.push_back(param_name_stream__.str());
        size_t b_su_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_su_Z_nid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_su_Z_nid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b_su";
        param_names__.push_back(param_name_stream__.str());
        size_t b_su_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_su_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_su_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_b_fa";
        param_names__.push_back(param_name_stream__.str());
        size_t b_fa_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_fa_Z_nid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fa_Z_nid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b_fa";
        param_names__.push_back(param_name_stream__.str());
        size_t b_fa_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_fa_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fa_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_psm";
        param_names__.push_back(param_name_stream__.str());
        size_t logit_p_psm_std_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < logit_p_psm_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logit_p_psm_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t A_nid_j_2_max__ = L;
            size_t A_nid_j_1_max__ = D;
            for (size_t j_2__ = 0; j_2__ < A_nid_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < A_nid_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "A_nid" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t g_mu_X_j_2_max__ = D;
            size_t g_mu_X_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < g_mu_X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < g_mu_X_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "g_mu_X" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b0_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_su_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b_su_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_su" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_fa_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b_fa_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_fa" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_psm_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_p_psm_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p_psm_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_psm_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_p_psm_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p_psm" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t sign_A_diag_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < sign_A_diag_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sign_A_diag" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A_j_2_max__ = L;
        size_t A_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Z_j_2_max__ = L;
        size_t Z_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t b0_Z_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b0_Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_su_Z_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_su_Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_su_Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_fa_Z_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_fa_Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fa_Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_psm_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < p_psm_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_psm" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_MC";
        param_names__.push_back(param_name_stream__.str());
        size_t ll_psm_j_1_max__ = N_lpd;
        for (size_t j_1__ = 0; j_1__ < ll_psm_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_psm" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }


    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t a0_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < a0_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "a0" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t phi_j_1_max__ = D;
        for (size_t j_1__ = 0; j_1__ < phi_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "phi" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A_nid_vec_j_1_max__ = ((D * L) - divide((L * (L - 1)), 2));
        for (size_t j_1__ = 0; j_1__ < A_nid_vec_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "A_nid_vec" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t Z_nid_j_2_max__ = L;
        size_t Z_nid_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < Z_nid_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_nid_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z_nid" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_b0";
        param_names__.push_back(param_name_stream__.str());
        size_t b0_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b0_Z_nid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_Z_nid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b0";
        param_names__.push_back(param_name_stream__.str());
        size_t b0_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b0_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_b_su";
        param_names__.push_back(param_name_stream__.str());
        size_t b_su_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_su_Z_nid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_su_Z_nid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b_su";
        param_names__.push_back(param_name_stream__.str());
        size_t b_su_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_su_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_su_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu_b_fa";
        param_names__.push_back(param_name_stream__.str());
        size_t b_fa_Z_nid_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_fa_Z_nid_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fa_Z_nid" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_b_fa";
        param_names__.push_back(param_name_stream__.str());
        size_t b_fa_std_j_1_max__ = S;
        for (size_t j_1__ = 0; j_1__ < b_fa_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fa_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "sigma_psm";
        param_names__.push_back(param_name_stream__.str());
        size_t logit_p_psm_std_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < logit_p_psm_std_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "logit_p_psm_std" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }

        if (!include_gqs__ && !include_tparams__) return;

        if (include_tparams__) {
            size_t A_nid_j_2_max__ = L;
            size_t A_nid_j_1_max__ = D;
            for (size_t j_2__ = 0; j_2__ < A_nid_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < A_nid_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "A_nid" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t g_mu_X_j_2_max__ = D;
            size_t g_mu_X_j_1_max__ = S;
            for (size_t j_2__ = 0; j_2__ < g_mu_X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < g_mu_X_j_1_max__; ++j_1__) {
                    param_name_stream__.str(std::string());
                    param_name_stream__ << "g_mu_X" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                    param_names__.push_back(param_name_stream__.str());
                }
            }
            size_t b0_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b0_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b0" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_su_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b_su_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_su" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t b_fa_j_1_max__ = S;
            for (size_t j_1__ = 0; j_1__ < b_fa_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "b_fa" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_psm_hat_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_p_psm_hat_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p_psm_hat" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t logit_p_psm_j_1_max__ = N;
            for (size_t j_1__ = 0; j_1__ < logit_p_psm_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "logit_p_psm" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }

        if (!include_gqs__) return;
        size_t sign_A_diag_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < sign_A_diag_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "sign_A_diag" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t A_j_2_max__ = L;
        size_t A_j_1_max__ = D;
        for (size_t j_2__ = 0; j_2__ < A_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < A_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "A" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t Z_j_2_max__ = L;
        size_t Z_j_1_max__ = S;
        for (size_t j_2__ = 0; j_2__ < Z_j_2_max__; ++j_2__) {
            for (size_t j_1__ = 0; j_1__ < Z_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "Z" << '.' << j_1__ + 1 << '.' << j_2__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        size_t b0_Z_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b0_Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b0_Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_su_Z_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_su_Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_su_Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t b_fa_Z_j_1_max__ = L;
        for (size_t j_1__ = 0; j_1__ < b_fa_Z_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "b_fa_Z" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        size_t p_psm_j_1_max__ = N;
        for (size_t j_1__ = 0; j_1__ < p_psm_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "p_psm" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "N_MC";
        param_names__.push_back(param_name_stream__.str());
        size_t ll_psm_j_1_max__ = N_lpd;
        for (size_t j_1__ = 0; j_1__ < ll_psm_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "ll_psm" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
    }

}; // model

}  // namespace

typedef model_cohoPSM_SEM_namespace::model_cohoPSM_SEM stan_model;


#endif
